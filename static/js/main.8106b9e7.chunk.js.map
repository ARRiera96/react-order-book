{"version":3,"sources":["OrderBookTable.js","PairSelector.js","OrderBook.js","App.js","serviceWorker.js","index.js"],"names":["OrderBookTable","requests","reverseColumns","tableHeaders","prevTotalVolume","reverse","Table","striped","bordered","variant","size","map","header","ask","i","arr","currentVolume","tableData","toFixed","data","PairSelector","pairsByGroupAbrv","defaultAssetPair","setAssetPair","value","onChange","e","target","Object","keys","assetGroup","key","label","assetPair","wsname","kraken","KrakenClient","OrderBook","useState","asks","setAsks","bids","setBids","assetPairs","setAssetPairs","a","api","pair","count","result","sortFunction","b","sort","forEach","base","quote","pairKey","includes","endsWith","push","useEffect","requestAssetPairs","requestOrderBook","className","Container","Row","Col","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8106b9e7.chunk.js","sourcesContent":["import React from \"react\";\nimport Table from 'react-bootstrap/Table';\n\nconst OrderBookTable = ({requests, reverseColumns}) => {\n    let tableHeaders = ['Amount', 'Total', 'Price'];\n    let prevTotalVolume = 0;\n    if(reverseColumns){\n        tableHeaders.reverse();\n    }\n    return (\n        <Table striped bordered variant=\"dark\" size=\"sm\">\n            <thead>\n            <tr>\n                {\n                    tableHeaders.map(header => (<th>{header}</th>))\n                }\n            </tr>\n            </thead>\n            <tbody>\n            {requests.map((ask, i, arr) => {\n                let currentVolume = +ask[1];\n                let total = i > 0 ? prevTotalVolume + currentVolume : currentVolume;\n                let tableData = [currentVolume, total.toFixed(3), ask[0]];\n                prevTotalVolume += currentVolume;\n                if(reverseColumns){\n                    tableData.reverse();\n                }\n\n               return (<tr>\n                   {\n                       tableData.map((data)=> (\n                         <td>{data}</td>\n                       ))\n                   }\n                </tr>)\n            }, prevTotalVolume) }\n            </tbody>\n        </Table>\n    );\n};\n\nexport default OrderBookTable;\n","import React from 'react';\n\nconst PairSelector = ({pairsByGroupAbrv, defaultAssetPair, setAssetPair}) =>  {\n    return (\n        <select\n        value={defaultAssetPair}\n        onChange={e => setAssetPair(e.target.value)}>\n            {Object.keys(pairsByGroupAbrv).map((assetGroup) => {\n                return (\n                    <optgroup key={assetGroup} label={assetGroup}>\n                        {\n                            pairsByGroupAbrv[assetGroup].map((assetPair) => {\n                                return (\n                                    <option key={assetPair.assetPair} value={assetPair.assetPair}>{assetPair.wsname}</option>\n                                )\n                            })\n                        }\n                    </optgroup>\n                );\n            })}\n        </select>\n    )\n};\n\nexport default PairSelector;\n","// eslint-disable-next-line\nimport React, { useState, useEffect } from 'react';\nimport KrakenClient from 'kraken-api';\nimport OrderBookTable from \"./OrderBookTable\";\nimport PairSelector from \"./PairSelector\";\nimport {Container, Row, Col} from 'react-bootstrap';\nconst kraken       = new KrakenClient('', '');\n\nconst OrderBook = () => {\n    const [asks, setAsks] = useState([]);\n    const [bids, setBids] = useState([]);\n    const [assetPair, setAssetPair] = useState('XETHZUSD');\n    const [assetPairs, setAssetPairs] = useState([]);\n\n    async function requestOrderBook() {\n        const { result } = await kraken.api('Depth', { pair : assetPair , count: 20});\n        const { asks, bids } = result[assetPair];\n        const sortFunction = (a,b) => {\n            return b[0] - a[0];\n        };\n        asks.sort(sortFunction);\n        bids.sort(sortFunction);\n        setAsks(asks || []);\n        setBids(bids || []);\n    }\n\n    async function requestAssetPairs() {\n        const { result } = await kraken.api('AssetPairs');\n        const assetPairs = {\n            'XXBT': [],\n            'XETH': []\n        };\n        Object.keys(result).forEach((assetPair) => {\n            let {base, quote, wsname} = result[assetPair];\n            let keys = Object.keys(assetPairs);\n            let pairKey = keys.includes(base) ? base : (keys.includes(quote) ? quote: '');\n            if(pairKey && !assetPair.endsWith('.d')){\n                assetPairs[pairKey].push({assetPair, wsname});\n            }\n        });\n        setAssetPairs(assetPairs);\n    }\n\n    useEffect(() => {\n        requestAssetPairs();\n    }, []);\n\n    useEffect(() => {\n        requestOrderBook();\n    }, [assetPair]);\n\n    return (\n        <div className=\"bg-dark pt-4\">\n            <Container>\n                <Row className=\"pb-2 ml-1\">\n                    <h3 className=\"text-light\">Order Book</h3>\n                </Row>\n                <Row className=\"pb-3 ml-1\">\n                    <PairSelector pairsByGroupAbrv={assetPairs} defaultAssetPair={assetPair} setAssetPair={setAssetPair} />\n                </Row>\n                <Row>\n                    <Col>\n                        <h4 className=\"text-light\">Bids</h4>\n                        <OrderBookTable requests={bids}/>\n                    </Col>\n                    <Col>\n                        <h4 className=\"text-light\">Asks</h4>\n                        <OrderBookTable requests={asks} reverseColumns={ true}/>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default OrderBook;\n\n","import React from 'react';\nimport './App.css';\nimport OrderBook from \"./OrderBook\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <OrderBook/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}